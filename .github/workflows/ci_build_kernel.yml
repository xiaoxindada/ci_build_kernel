# This is a basic workflow to help you get started with Actions

name: ci_build_kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_URL:
        description: 'kernel_url'
        required: true
        default: 'https://github.com/xiaocheng20/kernel_lge_sm8150.git'
      DEFCONFIG:
        description: 'defconfig'
        required: true
        default: 'vendor/flashlmdd_lao_com-perf_defconfig'

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Cleanup workspace
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox* google* dotnet* powershell openjdk* php*
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h

      - name: Setup Python2
        uses: actions/setup-python@v3.1.2
        with:
          python-version: '2.7'

      - name: Setup Python3
        uses: actions/setup-python@v3.1.2
        with:
          python-version: '3.8'

      - name: Setup environment
        run: |
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev
      
      - name: Clone kernel repo
        run: |
          git clone --recurse-submodules ${{ github.event.inputs.KERNEL_URL }} $GITHUB_WORKSPACE/kernel_source

      - name: Clone Toolchain
        run: |
         git clone --recurse-submodules https://github.com/xiaocheng20/Toolchain.git $GITHUB_WORKSPACE/kernel_source/Toolchain
         
      - name: Setup Toolchain
        run: |
          cd $GITHUB_WORKSPACE/kernel_source/Toolchain
          mkdir -p ../clang/
          mkdir -p ../gcc4.9/
          mkdir -p ../gcc4.9_32/
          cp -af google_clang/*/* ../clang/
          cp -af google_gcc/aarch64-linux-android-4.9/* ../gcc4.9/
          cp -af google_gcc/arm-linux-androideabi-4.9/* ../gcc4.9_32/
          cd ..
          ls | grep -E "clang|gcc4.9|gcc4.9_32"
          chmod 777 -R clang/ gcc4.9/ gcc4.9_32/
        
      - name: Build kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_source/
          LOCALDIR=$(realpath .)
          defconfig=${{ github.event.inputs.DEFCONFIG }}
          export ARCH=arm64
          args="-j$(nproc --all) \
          O=out \
          ARCH=arm64 \
          CC=$LOCALDIR/clang/bin/clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=$LOCALDIR/gcc4.9/bin/aarch64-linux-android- \
          CROSS_COMPILE_ARM32=$LOCALDIR/gcc4.9_32/bin/arm-linux-gnueabi-"
          make ${args} $defconfig
          make ${args}
          
      - name: Package kernel
        run: |
          cd cd $GITHUB_WORKSPACE/kernel_source/
          ls out/arch/arm64/boot/
      
